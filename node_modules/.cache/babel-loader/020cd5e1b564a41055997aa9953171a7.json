{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Afa\\\\Desktop\\\\npm test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Afa\\\\Desktop\\\\npm test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Afa\\\\Desktop\\\\npm test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Afa\\\\Desktop\\\\npm test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Afa\\\\Desktop\\\\npm test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Afa\\\\Desktop\\\\npm test\\\\node_modules\\\\gipsy\\\\src\\\\components\\\\GifResults.js\";\nimport React, { Component } from 'react';\nimport MediaCard from './MediaCard';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport Layout from './Layout';\n\nvar GifResults =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GifResults, _Component);\n\n  function GifResults() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GifResults);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GifResults)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      results: _this.props.results\n    };\n    return _this;\n  }\n\n  _createClass(GifResults, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('Component DID MOUNT!');\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.value !== this.props.value) {\n        this.setState({\n          value: nextProps.value\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loadedGifs = null;\n\n      if (this.props.results) {\n        console.log('GifResults State:', this.state.results);\n        console.log('GifResults Props:', this.props.results);\n        var gifs = this.state.results;\n        loadedGifs = gifs.map(function (gif) {\n          var maxPos = 25;\n\n          if (gif.title.length > maxPos) {\n            gif.title = gif.title.slice(0, 40) + '...';\n          }\n\n          return React.createElement(Grid, {\n            item: true,\n            xl: 3,\n            key: gif.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            },\n            __self: this\n          }, React.createElement(MediaCard, {\n            key: gif.id,\n            title: gif.title,\n            user: gif.username,\n            url: gif.images.original.url,\n            uploaded: gif.import_datetime,\n            rating: gif.rating,\n            frames: gif.images.original.frames,\n            faveData: {\n              key: gif.id,\n              title: gif.title,\n              user: gif.username,\n              url: gif.images.original.url,\n              uploaded: gif.import_datetime,\n              rating: gif.rating,\n              frames: gif.images.original.frames\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }));\n        });\n      }\n\n      return React.createElement(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, loadedGifs ? loadedGifs : null);\n    }\n  }]);\n\n  return GifResults;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    results: state.search.results\n  };\n};\n\nexport default connect(mapStateToProps)(GifResults);","map":{"version":3,"sources":["C:\\Users\\Afa\\Desktop\\npm test\\node_modules\\gipsy\\src\\components\\GifResults.js"],"names":["React","Component","MediaCard","connect","Grid","Layout","GifResults","state","results","props","console","log","nextProps","value","setState","loadedGifs","gifs","map","gif","maxPos","title","length","slice","id","username","images","original","url","import_datetime","rating","frames","key","user","uploaded","mapStateToProps","search"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport MediaCard from './MediaCard';\r\nimport {connect} from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Layout from './Layout';\r\n\r\nclass GifResults extends Component {\r\n   state = {\r\n     results: this.props.results  \r\n   }\r\n   componentDidMount() {\r\n    console.log('Component DID MOUNT!')\r\n }\r\n\r\n componentWillReceiveProps (nextProps) {\r\n  if (nextProps.value !== this.props.value) {\r\n    this.setState({ value: nextProps.value })\r\n  }  \r\n} \r\n      render() {\r\n        let loadedGifs = null;\r\n        if (this.props.results) {\r\n        console.log('GifResults State:', this.state.results);\r\n        console.log('GifResults Props:', this.props.results);\r\n        let gifs = this.state.results;\r\n        loadedGifs = gifs.map(  gif => {\r\n            const maxPos = 25\r\n            if (gif.title.length > maxPos) {\r\n                gif.title = gif.title.slice(0, 40) + '...';\r\n            }\r\n           \r\n          return (\r\n              <Grid item xl={3} key={gif.id}>\r\n                <MediaCard\r\n                          key={gif.id}\r\n                          title={gif.title} \r\n                          user={gif.username}                       \r\n                          url={gif.images.original.url}\r\n                          uploaded={gif.import_datetime}\r\n                          rating={gif.rating}\r\n                          frames={gif.images.original.frames}\r\n                          faveData={{\r\n                            key: gif.id,\r\n                            title:gif.title,\r\n                            user:gif.username,\r\n                            url:gif.images.original.url,\r\n                            uploaded:gif.import_datetime,\r\n                            rating:gif.rating,\r\n                            frames:gif.images.original.frames,\r\n                          }}\r\n                  />\r\n              </Grid>         \r\n          );\r\n      });\r\n    }\r\n        return (\r\n          <Layout> \r\n              {loadedGifs ? loadedGifs : null}                        \r\n          </Layout>\r\n        );\r\n      }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n      results: state.search.results\r\n    };\r\n  };\r\nexport default connect(mapStateToProps)(GifResults);"]},"metadata":{},"sourceType":"module"}